{"version":3,"file":"Button.stories-4960ddf7.js","sources":["../../react-components/src/Spinner/index.tsx","../../react-components/src/Button/index.tsx","../../react-components/src/tmpSvgIcon/index.tsx","../../react-components/src/Button/docs/index.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport './style.scss';\n\nexport const Spinner: FC = () => {\n  return (\n    <div className=\"Spinner\">\n      <svg x=\"0px\" y=\"0px\" width=\"14\" height=\"14\" viewBox=\"0 0 50 50\">\n        <path\n          fill=\"var(--color-text-90)\"\n          d=\"M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z\"\n        >\n          <animateTransform\n            attributeType=\"xml\"\n            attributeName=\"transform\"\n            type=\"rotate\"\n            from=\"0 25 25\"\n            to=\"360 25 25\"\n            dur=\"0.6s\"\n            repeatCount=\"indefinite\"\n          />\n        </path>\n      </svg>\n    </div>\n  );\n};\n","import React, { ButtonHTMLAttributes, forwardRef } from 'react';\nimport classNames from 'classnames';\n\nimport { Spinner } from '../Spinner';\n\nimport s from './style.module.scss';\n\ntype PaletteType = 'green' | 'yellow' | 'red';\ntype ViewType = 'primary' | 'outline' | 'ghost';\ntype SizeType = 'small' | 'middle' | 'large';\ntype ShapeType = 'brick' | 'round' | 'circle';\n\nconst sizeClasses: Record<SizeType, string> = {\n  small: s.buttonSizeSmall,\n  middle: s.buttonSizeMiddle,\n  large: s.buttonSizeLarge,\n};\nconst shapeClasses: Record<ShapeType, string> = {\n  brick: s.buttonShapeBrick,\n  round: s.buttonShapeRound,\n  circle: s.buttonShapeCircle,\n};\nconst disabledClasses: Record<ViewType, string> = {\n  primary: s.disabledPrimary,\n  outline: s.disabledOutline,\n  ghost: s.disabledGhost,\n};\n\n// TODO view outline желательно переименовать в secondary или в макетах secondary в outline\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  view?: ViewType;\n  size?: SizeType;\n  palette?: PaletteType;\n  shape?: ShapeType;\n  square?: boolean;\n  block?: boolean;\n  loading?: boolean;\n}\ntype Ref = HTMLButtonElement;\n\nexport const Button = forwardRef<Ref, ButtonProps>(\n  (\n    {\n      children,\n      type,\n      disabled,\n      palette,\n      shape = 'round',\n      size = 'middle',\n      view = 'primary',\n      square = false,\n      block = false,\n      loading = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const utilityClasses = `button_${view} button-${palette || 'primary'}`;\n\n    return (\n      <button\n        {...props}\n        ref={ref}\n        type={type || 'button'}\n        disabled={loading || disabled}\n        className={classNames(\n          utilityClasses,\n          s.button,\n          sizeClasses[size],\n          shapeClasses[shape],\n          square && s.buttonSquare,\n          block && s.buttonBlock,\n          loading && s.buttonLoading,\n          disabled && disabledClasses[view],\n          className,\n        )}\n      >\n        <span className={s.children}>{children}</span>\n        {/*TODO в макете не нашел состояние лоадинг, нужно доавить*/}\n        <span className={s.loading}>\n          <Spinner />\n        </span>\n      </button>\n    );\n  },\n);\n","import React, { FC } from 'react';\n\nexport const TmpSvgIcon: FC = () => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n    <rect\n      x=\"1.9895\"\n      y=\"13.3033\"\n      width=\"16\"\n      height=\"1\"\n      rx=\"0.5\"\n      transform=\"rotate(-45 1.9895 13.3033)\"\n      fill=\"var(--color-text-90)\"\n    />\n    <rect\n      x=\"1.28247\"\n      y=\"9.76782\"\n      width=\"12\"\n      height=\"1\"\n      rx=\"0.5\"\n      transform=\"rotate(-45 1.28247 9.76782)\"\n      fill=\"var(--color-text-90)\"\n    />\n    <rect\n      x=\"14.7175\"\n      y=\"6.23218\"\n      width=\"12\"\n      height=\"1\"\n      rx=\"0.5\"\n      transform=\"rotate(135 14.7175 6.23218)\"\n      fill=\"var(--color-text-90)\"\n    />\n    <rect\n      x=\"0.575439\"\n      y=\"6.23218\"\n      width=\"8\"\n      height=\"1\"\n      rx=\"0.5\"\n      transform=\"rotate(-45 0.575439 6.23218)\"\n      fill=\"var(--color-text-90)\"\n    />\n    <rect\n      x=\"15.4246\"\n      y=\"9.76782\"\n      width=\"8\"\n      height=\"1\"\n      rx=\"0.5\"\n      transform=\"rotate(135 15.4246 9.76782)\"\n      fill=\"var(--color-text-90)\"\n    />\n  </svg>\n);\n","import React from 'react';\nimport {\n  ArgsTable,\n  Primary,\n  Stories,\n  PRIMARY_STORY,\n} from '@storybook/addon-docs';\n\nimport { Button, ButtonProps } from '../index';\nimport { Typography } from '../../Typography';\nimport { TmpSvgIcon } from '../../tmpSvgIcon';\n\nimport s from './style.module.scss';\nimport buttonClassNames from '../style.module.scss';\n\nconst { Title, Paragraph, Text } = Typography;\n\ninterface BaseType {\n  key: string;\n  title: string;\n}\n\nconst buttonTypes: (BaseType & Pick<ButtonProps, 'view' | 'square'>)[] = [\n  {\n    key: 'primary',\n    title: 'Primary',\n    view: 'primary',\n    square: false,\n  },\n  {\n    key: 'secondary',\n    title: 'Secondary',\n    view: 'outline',\n    square: false,\n  },\n  {\n    key: 'ghost',\n    title: 'Ghost',\n    view: 'ghost',\n    square: false,\n  },\n  {\n    key: 'primary-icon',\n    title: 'Primary Icon',\n    view: 'primary',\n    square: true,\n  },\n  {\n    key: 'secondary-icon',\n    title: 'Secondary Icon',\n    view: 'outline',\n    square: true,\n  },\n  {\n    key: 'ghost-icon',\n    title: 'Ghost Icon',\n    view: 'ghost',\n    square: true,\n  },\n];\nconst buttonStates: (BaseType & Pick<ButtonProps, 'disabled'>)[] = [\n  {\n    key: 'rest',\n    title: 'Rest',\n    disabled: false,\n  },\n  {\n    key: 'hover',\n    title: 'Hover here',\n    disabled: false,\n  },\n  {\n    key: 'press',\n    title: 'Press here',\n    disabled: false,\n  },\n  {\n    key: 'disable',\n    title: 'Disable',\n    disabled: true,\n  },\n  {\n    key: 'focus',\n    title: 'Focus with keyboard',\n    disabled: false,\n  },\n];\nconst buttonSizes: (BaseType & Pick<ButtonProps, 'size'>)[] = [\n  {\n    key: 's',\n    title: 'S',\n    size: 'small',\n  },\n  {\n    key: 'm',\n    title: 'M',\n    size: 'middle',\n  },\n  {\n    key: 'l',\n    title: 'L',\n    size: 'large',\n  },\n];\n\nexport const ButtonDocs = () => {\n  return (\n    <div className={s.root}>\n      <Title\n        level={4}\n        style={{\n          marginBottom: 0,\n        }}\n      >\n        Кнопка\n      </Title>\n      <Paragraph\n        fontVariant=\"caption\"\n        style={{ marginTop: 0, color: 'var(--color-primary-50)' }}\n      >\n        {buttonClassNames.button}\n      </Paragraph>\n\n      <br />\n\n      <Paragraph>\n        Button (кнопка) — компонент, который призывает пользователя к совершению\n        определенного действия в интерфейсе, например: открыть следующую\n        страницу, заказать товар или войти в свой аккаунт.\n      </Paragraph>\n      <Paragraph>\n        Основной призыв к действию. Предназначены для выполнения какого-либо\n        действия в системе.\n      </Paragraph>\n\n      <Title level={6}>Как использовать</Title>\n      <Paragraph>Основные правила применения кнопки:</Paragraph>\n      <ul>\n        <Text>\n          <li>Текст кнопки всегда должен быть с заглавной буквы;</li>\n        </Text>\n        <Text>\n          <li>\n            Текст на кнопке должен сообщать пользователю, что произойдёт, если\n            он нажмёт на кнопку (например, Сохранить, Добавить и т. п.);\n          </li>\n        </Text>\n        <Text>\n          <li>\n            Не перенасыщать страницу большим количеством Primary кнопок. Не\n            распологать их рядом друг с другом.\n          </li>\n        </Text>\n      </ul>\n\n      <Title level={6}>Типы кнопок</Title>\n      <Paragraph>\n        В системе существуют всего 6 типов кнопок — это Primary (основная),\n        Secondary (второстепенная) и Ghost (без фона), Primary Icon, Secondary\n        Icon, Ghost Icon кнопки\n      </Paragraph>\n      <div className={s.exampleBlock}>\n        {buttonTypes.map(({ key, title, view, square }) => (\n          <div key={key}>\n            <Text fontVariant=\"captionSemi\">{title}</Text>\n            <Button view={view} square={square}>\n              <TmpSvgIcon /> Загрузить\n            </Button>\n          </div>\n        ))}\n      </div>\n\n      <Title level={6}>Состояния кнопок</Title>\n      <Paragraph>Есть 5 состояний каждой кнопки:</Paragraph>\n      <ol>\n        <Text>\n          <li>Rest (покой)</li>\n        </Text>\n        <Text>\n          <li>Hover (наведение)</li>\n        </Text>\n        <Text>\n          <li>Press (нажатие)</li>\n        </Text>\n        <Text>\n          <li>Disable (недоступно)</li>\n        </Text>\n        <Text>\n          <li>Focus (в фокусе)</li>\n        </Text>\n      </ol>\n      <div className={s.exampleBlock}>\n        {buttonStates.map(({ key, title, disabled }) => (\n          <div key={key}>\n            <Text fontVariant=\"captionSemi\">{title}</Text>\n            <Button disabled={disabled}>\n              <TmpSvgIcon /> Загрузить\n            </Button>\n          </div>\n        ))}\n      </div>\n\n      <Title level={6}>Размер кнопок</Title>\n      <Paragraph>\n        Есть 3 размера кнопок — S, M и L. В основном в проектах используются\n        кнопки размера M\n      </Paragraph>\n      <div className={s.exampleBlock}>\n        {buttonSizes.map(({ key, title, size }) => (\n          <div key={key}>\n            <Text fontVariant=\"captionSemi\">{title}</Text>\n            <Button size={size}>\n              <TmpSvgIcon /> Загрузить\n            </Button>\n          </div>\n        ))}\n      </div>\n\n      <br />\n      <br />\n      <Primary />\n      <ArgsTable story={PRIMARY_STORY} />\n      <Stories />\n    </div>\n  );\n};\n"],"names":["Spinner","jsx","sizeClasses","s","shapeClasses","disabledClasses","Button","forwardRef","children","type","disabled","palette","shape","size","view","square","block","loading","className","props","ref","utilityClasses","jsxs","classNames","TmpSvgIcon","Title","Paragraph","Text","Typography","buttonTypes","buttonStates","buttonSizes","ButtonDocs","buttonClassNames","key","title","Primary","ArgsTable","PRIMARY_STORY","Stories"],"mappings":"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"}